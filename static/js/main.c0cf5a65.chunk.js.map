{"version":3,"sources":["components/User/User.tsx","utils/api.ts","components/Comment/Comment.tsx","store/actionCreators.ts","store/actionTypes.ts","components/CommentList/CommentList.tsx","components/Post/Post.tsx","components/PostsList/PostsList.tsx","App.tsx","utils/dataMappers.ts","store/rootReducer.ts","store/postsReducer.ts","store/usersReducer.ts","store/commentsReducer.ts","store/loadedReducer.ts","store/loadingReducer.ts","store/errorReducer.ts","store/queryReducer.ts","store/store.ts","index.tsx"],"names":["User","user","name","email","address","street","city","className","API_URL","getData","url","a","fetch","response","json","mapDispatchToProps","removeComment","id","postId","type","payload","Comment","connect","comment","body","onClick","CommentList","comments","map","key","removePost","Post","post","title","PostsList","posts","length","loadData","dispatch","Promise","all","then","loadedPosts","loadedUsers","loadedComments","users","catch","finally","setQuery","query","App","state","isLoading","isError","isLoaded","find","person","userId","filter","visiblePosts","useMemo","queryToLowerCase","toLowerCase","titleToLowerCase","bodyToLowerCase","includes","getFilteredPosts","htmlFor","value","onChange","event","target","disabled","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c0cf5a65.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport { UserType } from '../../utils/interfaces';\nimport './User.css';\n\ninterface Props {\n  user: UserType;\n}\n\nexport const User: FC<Props> = ({ user }) => {\n  const { name, email, address } = user;\n  const { street, city } = address;\n\n  return (\n    <div className=\"user\">\n      <span className=\"user__name\">{name}</span>\n      <span className=\"user__email\">{email}</span>\n      <div className=\"user__address\">\n        <span className=\"user__street\">{`${street} str., `}</span>\n        <span className=\"user__city\">{city}</span>\n      </div>\n    </div>\n  );\n};\n","import { PostType, CommentType, UserType } from './interfaces';\n\nconst API_URL = 'https://jsonplaceholder.typicode.com/';\n\nasync function getData<T>(url: string): Promise<T> {\n  const response = await fetch(url);\n\n  return response.json();\n}\n\nexport const getPosts = (): Promise<PostType[]> => {\n  return getData(`${API_URL}posts`);\n};\n\nexport const getUsers = (): Promise<UserType[]> => {\n  return getData(`${API_URL}users`);\n};\n\nexport const getComments = (): Promise<CommentType[]> => {\n  return getData(`${API_URL}comments`);\n};\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { CommentType } from '../../utils/interfaces';\nimport './Comment.css';\nimport { removeComment as deleteComment } from '../../store/actionCreators';\n\ninterface Props {\n  comment: CommentType;\n  removeComment: (id: string | number, postId: number) => void;\n}\n\nexport const CommentTemplate: FC<Props> = ({ comment, removeComment }) => {\n  const {\n    name,\n    body,\n    email,\n    id,\n    postId,\n  } = comment;\n\n  return (\n    <>\n      <button type=\"button\" onClick={() => removeComment(id, postId)}>X</button>\n      <h3 className=\"comment__title\">{name}</h3>\n      <p className=\"comment__text\">{body}</p>\n      <p className=\"comment__email\">{email}</p>\n    </>\n  );\n};\n\nconst mapDispatchToProps = {\n  removeComment: deleteComment,\n};\n\nexport const Comment = connect(null, mapDispatchToProps)(CommentTemplate);\n","import { Dispatch } from 'redux';\nimport { getPosts, getUsers, getComments } from '../utils/api';\nimport { UserType, CommentType, PostType } from '../utils/interfaces';\nimport {\n  SET_POSTS,\n  SET_USERS,\n  SET_COMMENTS,\n  SET_LOADING,\n  SET_ERROR,\n  SET_IS_LOADED,\n  SET_QUERY,\n  REMOVE_POST,\n  REMOVE_COMMENT,\n} from './actionTypes';\n\nexport const setPosts = (posts: PostType[]) => ({\n  type: SET_POSTS,\n  posts,\n});\n\nexport const setUsers = (users: UserType[]) => ({\n  type: SET_USERS,\n  users,\n});\n\nexport const setComments = (comments: CommentType[]) => ({\n  type: SET_COMMENTS,\n  comments,\n});\n\nexport const startLoading = () => ({\n  type: SET_LOADING,\n  payload: true,\n});\n\nexport const stopLoading = () => ({\n  type: SET_LOADING,\n  payload: false,\n});\n\nexport const setIsLoaded = () => ({\n  type: SET_IS_LOADED,\n  payload: true,\n});\n\nexport const isError = () => ({\n  type: SET_ERROR,\n  payload: true,\n});\n\nexport const setQuery = (query: string) => ({\n  type: SET_QUERY,\n  payload: query,\n});\n\nexport const removePost = (id: number) => ({\n  type: REMOVE_POST,\n  payload: id,\n});\n\nexport const removeComment = (id: number | string, postId: number) => ({\n  type: REMOVE_COMMENT,\n  payload: {\n    id,\n    postId,\n  },\n});\n\nexport const loadData = () => {\n  return (dispatch: Dispatch) => {\n    dispatch(startLoading());\n\n    return Promise\n      .all([\n        getPosts(),\n        getUsers(),\n        getComments(),\n      ])\n      .then(([loadedPosts, loadedUsers, loadedComments]) => {\n        dispatch(setPosts(loadedPosts));\n        dispatch(setComments(loadedComments));\n        dispatch(setUsers(loadedUsers));\n        dispatch(setIsLoaded());\n      })\n      .catch(() => {\n        dispatch(isError());\n      })\n      .finally(() => dispatch(stopLoading()));\n  };\n};\n","export const SET_POSTS = 'SET_POSTS';\nexport const SET_USERS = 'SET_USERS';\nexport const SET_COMMENTS = 'SET_COMMENTS';\nexport const SET_LOADING = 'SET_LOADING';\nexport const SET_IS_LOADED = 'SET_IS_LOADED';\nexport const SET_ERROR = 'SET_ERROR';\nexport const SET_QUERY = 'SET_QUERY';\nexport const REMOVE_POST = 'REMOVE_POST';\nexport const REMOVE_COMMENT = 'REMOVE_COMMENT';\n","import React, { FC } from 'react';\nimport { Comment } from '../Comment/Comment';\nimport { CommentType } from '../../utils/interfaces';\nimport './CommentList.css';\n\ninterface Props {\n  comments: CommentType[];\n}\n\nexport const CommentList: FC<Props> = ({ comments }) => (\n  <ul className=\"comments\">\n    {comments.map(comment => (\n      <li key={comment.id} className=\"comments__item comment\">\n        <Comment comment={comment} />\n      </li>\n    ))}\n  </ul>\n);\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { User } from '../User/User';\nimport { CommentList } from '../CommentList/CommentList';\nimport { FullPostType } from '../../utils/interfaces';\nimport './Post.css';\nimport { removePost as deletePost } from '../../store/actionCreators';\n\ninterface Props {\n  post: FullPostType;\n  removePost: (id: number) => void;\n}\n\nexport const PostTemplate: FC<Props> = ({ post, removePost }) => {\n  const {\n    title,\n    body,\n    user,\n    comments,\n    id,\n  } = post;\n\n  return (\n    <>\n      <button type=\"button\" onClick={() => removePost(id)}>X</button>\n      <h2 className=\"post__title\">{title}</h2>\n      <p className=\"post__text\">{body}</p>\n      <User user={user} />\n      <h2 className=\"post__comments\">Comments</h2>\n      <CommentList comments={comments} />\n    </>\n  );\n};\n\n\nconst mapDispatchToProps = {\n  removePost: deletePost,\n};\n\nexport const Post = connect(null, mapDispatchToProps)(PostTemplate);\n","import React, { FC } from 'react';\nimport { Post } from '../Post/Post';\nimport { FullPostType } from '../../utils/interfaces';\nimport './PostsList.css';\n\ninterface Props {\n  posts: FullPostType[];\n}\n\nexport const PostsList: FC<Props> = ({ posts }) => {\n  return (\n    <>\n      <p>{`Searched posts: ${posts.length}`}</p>\n      <ul className=\"post-list\">\n        {posts.map(post => (\n          <li key={post.id} className=\"post-list__item post\">\n            <Post post={post} />\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","import React, { FC, ChangeEvent, useMemo } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport { PostsList } from './components/PostsList/PostsList';\nimport { RootState, FullPostType } from './utils/interfaces';\nimport { fullPosts, getFilteredPosts } from './utils/dataMappers';\nimport { loadData as loadAllData, setQuery as changeSetQuery } from './store/actionCreators';\n\ninterface Props {\n  isLoading: boolean;\n  isError: boolean;\n  isLoaded: boolean;\n  posts: FullPostType[];\n  query: string;\n  loadData: () => void;\n  setQuery: (query: string) => void;\n}\n\nconst AppTemplate: FC<Props> = ({\n  isLoading,\n  isLoaded,\n  isError,\n  loadData,\n  setQuery,\n  posts,\n  query,\n}) => {\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setQuery(value);\n  };\n\n  const visiblePosts = useMemo(() => getFilteredPosts(query, posts), [query, posts]);\n\n  if (isError) {\n    return <p className=\"error-message\">Error occurred! Please, try again!</p>;\n  }\n\n  return (\n    <>\n      {!isLoaded\n        ? (\n          <button\n            className=\"start-button\"\n            type=\"button\"\n            onClick={loadData}\n            disabled={isLoading}\n          >\n            {isLoading ? 'Loading...' : 'Start load posts'}\n          </button>\n        )\n        : (\n          <div className=\"app\">\n            <h1>Dynamic list of posts</h1>\n            <label\n              htmlFor=\"search\"\n              className=\"app__label\"\n            >\n              {'Search post:  '}\n              <input\n                className=\"app__input\"\n                id=\"search\"\n                type=\"text\"\n                value={query}\n                onChange={handleChange}\n              />\n            </label>\n            <PostsList posts={visiblePosts} />\n          </div>\n        )}\n    </>\n  );\n};\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    isLoading: state.isLoading,\n    isError: state.isError,\n    isLoaded: state.isLoaded,\n    query: state.query,\n    posts: (state.users.length && state.comments.length)\n      ? fullPosts(state.posts, state.users, state.comments) : [],\n  };\n};\n\nconst mapDispatchToProps = {\n  loadData: loadAllData,\n  setQuery: changeSetQuery,\n};\n\nexport const App = connect(mapStateToProps, mapDispatchToProps)(AppTemplate);\n","import {\n  PostType,\n  UserType,\n  CommentType,\n  FullPostType,\n} from './interfaces';\n\nexport const fullPosts = (posts: PostType[], users: UserType[], comments: CommentType[]) => {\n  return posts.map((post: PostType) => ({\n    ...post,\n    user: users\n      .find((person: UserType) => person.id === post.userId) as UserType,\n    comments: comments\n      .filter((comment: CommentType) => post.id === comment.postId) as CommentType[],\n  }));\n};\n\n\nexport const getFilteredPosts = (query: string, posts: FullPostType[]) => {\n  const queryToLowerCase = query.toLowerCase();\n\n  return posts.filter((post: PostType) => {\n    const titleToLowerCase = post.title.toLowerCase();\n    const bodyToLowerCase = post.body.toLowerCase();\n\n    return (\n      titleToLowerCase.includes(queryToLowerCase)\n      || bodyToLowerCase.includes(queryToLowerCase)\n    );\n  });\n};\n","import { combineReducers } from 'redux';\n// import { RootState } from '../utils/interfaces';\nimport { postsReducer } from './postsReducer';\nimport { usersReducer } from './usersReducer';\nimport { commentsReducer } from './commentsReducer';\nimport { loadingReducer } from './loadingReducer';\nimport { errorReducer } from './errorReducer';\nimport { loadedReducer } from './loadedReducer';\nimport { queryReducer } from './queryReducer';\n\n// export const getPosts = (state: RootState) => state.posts;\n// export const getComments = (state: RootState) => state.comments;\n// export const getUsers = (state: RootState) => state.users;\n// export const getIsError = (state: RootState) => state.isError;\n// export const getIsLoading = (state: RootState) => state.isLoading;\n// export const getIsLoaded = (state: RootState) => state.isLoading;\n\nexport const initialState = {\n  posts: [],\n  users: [],\n  comments: [],\n  isLoading: false,\n  isLoaded: false,\n  isError: false,\n  query: '',\n};\n\nexport const rootReducer = combineReducers({\n  posts: postsReducer,\n  users: usersReducer,\n  comments: commentsReducer,\n  isLoaded: loadedReducer,\n  isLoading: loadingReducer,\n  isError: errorReducer,\n  query: queryReducer,\n});\n","import { AnyAction } from 'redux';\nimport { FullPostType } from '../utils/interfaces';\nimport { SET_POSTS, REMOVE_POST } from './actionTypes';\n\nexport const postsReducer = (state = [], action: AnyAction) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return action.posts;\n\n    case REMOVE_POST:\n      return state.filter((post: FullPostType) => post.id !== action.payload);\n\n    default:\n      return state;\n  }\n};\n","import { AnyAction } from 'redux';\nimport { SET_USERS } from './actionTypes';\n\nexport const usersReducer = (state = [], action: AnyAction) => {\n  switch (action.type) {\n    case SET_USERS:\n      return action.users;\n\n    default:\n      return state;\n  }\n};\n","import { AnyAction } from 'redux';\nimport { SET_COMMENTS, REMOVE_COMMENT } from './actionTypes';\nimport { CommentType } from '../utils/interfaces';\n\nexport const commentsReducer = (state = [], action: AnyAction) => {\n  switch (action.type) {\n    case SET_COMMENTS:\n      return action.comments;\n\n    case REMOVE_COMMENT:\n      return state.map((comment: CommentType) => {\n        if (comment.id === action.payload.id && comment.postId === action.payload.postId) {\n          return {\n            ...comment,\n            id: 999,\n          };\n        }\n\n        return {\n          ...comment,\n        };\n      }).filter((comment: CommentType) => comment.id !== 999);\n\n    default:\n      return state;\n  }\n};\n","import { AnyAction } from 'redux';\nimport { SET_IS_LOADED } from './actionTypes';\n\nexport const loadedReducer = (state = false, action: AnyAction) => {\n  switch (action.type) {\n    case SET_IS_LOADED:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","import { AnyAction } from 'redux';\nimport { SET_LOADING } from './actionTypes';\n\nexport const loadingReducer = (state = false, action: AnyAction) => {\n  switch (action.type) {\n    case SET_LOADING:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","import { AnyAction } from 'redux';\nimport { SET_ERROR } from './actionTypes';\n\nexport const errorReducer = (state = false, action: AnyAction) => {\n  switch (action.type) {\n    case SET_ERROR:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","import { AnyAction } from 'redux';\nimport { SET_QUERY } from './actionTypes';\n\nexport const queryReducer = (state = [], action: AnyAction) => {\n  switch (action.type) {\n    case SET_QUERY:\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n","import {\n  createStore,\n  applyMiddleware,\n} from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { rootReducer, initialState } from './rootReducer';\n\nexport const store = createStore(rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(thunk)));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { App } from './App';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}